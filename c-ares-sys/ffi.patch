--- src/ffi.rs.orig	2017-03-19 19:51:56.047460398 +0000
+++ src/ffi.rs	2017-03-19 20:05:08.080603066 +0000
@@ -1,4 +1,12 @@
 /* automatically generated by rust-bindgen */
+#![allow(non_camel_case_types, non_snake_case)]
+use c_types::fd_set;
+use c_types::hostent;
+use c_types::in_addr;
+use c_types::iovec;
+use c_types::sockaddr;
+use c_types::socklen_t;
+use libc::timeval;
 
 #[repr(C)]
 pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
@@ -26,7 +34,10 @@
 }
 pub type ares_socklen_t = socklen_t;
 pub type ares_ssize_t = isize;
-pub type ares_socket_t = ::std::os::raw::c_int;
+#[cfg(windows)]
+pub type ares_socket_t = ::std::os::windows::io::RawSocket;
+#[cfg(unix)]
+pub type ares_socket_t = ::std::os::unix::io::RawFd;
 pub type ares_sock_state_cb =
     ::std::option::Option<unsafe extern "C" fn(data:
                                                    *mut ::std::os::raw::c_void,
@@ -60,108 +71,12 @@
     pub nsort: ::std::os::raw::c_int,
     pub ednspsz: ::std::os::raw::c_int,
 }
-#[test]
-fn bindgen_test_layout_ares_options() {
-    assert_eq!(::std::mem::size_of::<ares_options>() , 104usize , concat ! (
-               "Size of: " , stringify ! ( ares_options ) ));
-    assert_eq! (::std::mem::align_of::<ares_options>() , 8usize , concat ! (
-                "Alignment of " , stringify ! ( ares_options ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_options ) ) . flags as * const _ as
-                usize } , 0usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_options ) , "::" ,
-                stringify ! ( flags ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_options ) ) . timeout as * const _
-                as usize } , 4usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_options ) , "::" ,
-                stringify ! ( timeout ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_options ) ) . tries as * const _ as
-                usize } , 8usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_options ) , "::" ,
-                stringify ! ( tries ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_options ) ) . ndots as * const _ as
-                usize } , 12usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_options ) , "::" ,
-                stringify ! ( ndots ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_options ) ) . udp_port as * const _
-                as usize } , 16usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_options ) , "::" ,
-                stringify ! ( udp_port ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_options ) ) . tcp_port as * const _
-                as usize } , 18usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_options ) , "::" ,
-                stringify ! ( tcp_port ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_options ) ) .
-                socket_send_buffer_size as * const _ as usize } , 20usize ,
-                concat ! (
-                "Alignment of field: " , stringify ! ( ares_options ) , "::" ,
-                stringify ! ( socket_send_buffer_size ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_options ) ) .
-                socket_receive_buffer_size as * const _ as usize } , 24usize ,
-                concat ! (
-                "Alignment of field: " , stringify ! ( ares_options ) , "::" ,
-                stringify ! ( socket_receive_buffer_size ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_options ) ) . servers as * const _
-                as usize } , 32usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_options ) , "::" ,
-                stringify ! ( servers ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_options ) ) . nservers as * const _
-                as usize } , 40usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_options ) , "::" ,
-                stringify ! ( nservers ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_options ) ) . domains as * const _
-                as usize } , 48usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_options ) , "::" ,
-                stringify ! ( domains ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_options ) ) . ndomains as * const _
-                as usize } , 56usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_options ) , "::" ,
-                stringify ! ( ndomains ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_options ) ) . lookups as * const _
-                as usize } , 64usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_options ) , "::" ,
-                stringify ! ( lookups ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_options ) ) . sock_state_cb as *
-                const _ as usize } , 72usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_options ) , "::" ,
-                stringify ! ( sock_state_cb ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_options ) ) . sock_state_cb_data as
-                * const _ as usize } , 80usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_options ) , "::" ,
-                stringify ! ( sock_state_cb_data ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_options ) ) . sortlist as * const _
-                as usize } , 88usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_options ) , "::" ,
-                stringify ! ( sortlist ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_options ) ) . nsort as * const _ as
-                usize } , 96usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_options ) , "::" ,
-                stringify ! ( nsort ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_options ) ) . ednspsz as * const _
-                as usize } , 100usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_options ) , "::" ,
-                stringify ! ( ednspsz ) ));
-}
 impl Clone for ares_options {
     fn clone(&self) -> Self { *self }
 }
+impl Default for ares_options {
+    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
+}
 #[repr(C)]
 #[derive(Debug, Copy, Clone)]
 pub struct ares_channeldata([u8; 0]);
@@ -343,40 +258,6 @@
                                                                *mut ::std::os::raw::c_void)
                                           -> ares_ssize_t>,
 }
-#[test]
-fn bindgen_test_layout_ares_socket_functions() {
-    assert_eq!(::std::mem::size_of::<ares_socket_functions>() , 40usize ,
-               concat ! ( "Size of: " , stringify ! ( ares_socket_functions )
-               ));
-    assert_eq! (::std::mem::align_of::<ares_socket_functions>() , 8usize ,
-                concat ! (
-                "Alignment of " , stringify ! ( ares_socket_functions ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_socket_functions ) ) . asocket as *
-                const _ as usize } , 0usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_socket_functions )
-                , "::" , stringify ! ( asocket ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_socket_functions ) ) . aclose as *
-                const _ as usize } , 8usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_socket_functions )
-                , "::" , stringify ! ( aclose ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_socket_functions ) ) . aconnect as *
-                const _ as usize } , 16usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_socket_functions )
-                , "::" , stringify ! ( aconnect ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_socket_functions ) ) . arecvfrom as
-                * const _ as usize } , 24usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_socket_functions )
-                , "::" , stringify ! ( arecvfrom ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_socket_functions ) ) . asendv as *
-                const _ as usize } , 32usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_socket_functions )
-                , "::" , stringify ! ( asendv ) ));
-}
 impl Clone for ares_socket_functions {
     fn clone(&self) -> Self { *self }
 }
@@ -504,63 +385,18 @@
     pub _S6_u8: __BindgenUnionField<[::std::os::raw::c_uchar; 16usize]>,
     pub bindgen_union_field: [u8; 16usize],
 }
-#[test]
-fn bindgen_test_layout_ares_in6_addr__bindgen_ty_1() {
-    assert_eq!(::std::mem::size_of::<ares_in6_addr__bindgen_ty_1>() , 16usize
-               , concat ! (
-               "Size of: " , stringify ! ( ares_in6_addr__bindgen_ty_1 ) ));
-    assert_eq! (::std::mem::align_of::<ares_in6_addr__bindgen_ty_1>() , 1usize
-                , concat ! (
-                "Alignment of " , stringify ! ( ares_in6_addr__bindgen_ty_1 )
-                ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_in6_addr__bindgen_ty_1 ) ) . _S6_u8
-                as * const _ as usize } , 0usize , concat ! (
-                "Alignment of field: " , stringify ! (
-                ares_in6_addr__bindgen_ty_1 ) , "::" , stringify ! ( _S6_u8 )
-                ));
-}
 impl Clone for ares_in6_addr__bindgen_ty_1 {
     fn clone(&self) -> Self { *self }
 }
-#[test]
-fn bindgen_test_layout_ares_in6_addr() {
-    assert_eq!(::std::mem::size_of::<ares_in6_addr>() , 16usize , concat ! (
-               "Size of: " , stringify ! ( ares_in6_addr ) ));
-    assert_eq! (::std::mem::align_of::<ares_in6_addr>() , 1usize , concat ! (
-                "Alignment of " , stringify ! ( ares_in6_addr ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_in6_addr ) ) . _S6_un as * const _
-                as usize } , 0usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_in6_addr ) , "::"
-                , stringify ! ( _S6_un ) ));
-}
 impl Clone for ares_in6_addr {
     fn clone(&self) -> Self { *self }
 }
 #[repr(C)]
-#[derive(Debug, Copy)]
+#[derive(Copy)]
 pub struct ares_addrttl {
     pub ipaddr: in_addr,
     pub ttl: ::std::os::raw::c_int,
 }
-#[test]
-fn bindgen_test_layout_ares_addrttl() {
-    assert_eq!(::std::mem::size_of::<ares_addrttl>() , 8usize , concat ! (
-               "Size of: " , stringify ! ( ares_addrttl ) ));
-    assert_eq! (::std::mem::align_of::<ares_addrttl>() , 4usize , concat ! (
-                "Alignment of " , stringify ! ( ares_addrttl ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_addrttl ) ) . ipaddr as * const _ as
-                usize } , 0usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_addrttl ) , "::" ,
-                stringify ! ( ipaddr ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_addrttl ) ) . ttl as * const _ as
-                usize } , 4usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_addrttl ) , "::" ,
-                stringify ! ( ttl ) ));
-}
 impl Clone for ares_addrttl {
     fn clone(&self) -> Self { *self }
 }
@@ -570,23 +406,6 @@
     pub ip6addr: ares_in6_addr,
     pub ttl: ::std::os::raw::c_int,
 }
-#[test]
-fn bindgen_test_layout_ares_addr6ttl() {
-    assert_eq!(::std::mem::size_of::<ares_addr6ttl>() , 20usize , concat ! (
-               "Size of: " , stringify ! ( ares_addr6ttl ) ));
-    assert_eq! (::std::mem::align_of::<ares_addr6ttl>() , 4usize , concat ! (
-                "Alignment of " , stringify ! ( ares_addr6ttl ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_addr6ttl ) ) . ip6addr as * const _
-                as usize } , 0usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_addr6ttl ) , "::"
-                , stringify ! ( ip6addr ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_addr6ttl ) ) . ttl as * const _ as
-                usize } , 16usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_addr6ttl ) , "::"
-                , stringify ! ( ttl ) ));
-}
 impl Clone for ares_addr6ttl {
     fn clone(&self) -> Self { *self }
 }
@@ -599,38 +418,6 @@
     pub weight: ::std::os::raw::c_ushort,
     pub port: ::std::os::raw::c_ushort,
 }
-#[test]
-fn bindgen_test_layout_ares_srv_reply() {
-    assert_eq!(::std::mem::size_of::<ares_srv_reply>() , 24usize , concat ! (
-               "Size of: " , stringify ! ( ares_srv_reply ) ));
-    assert_eq! (::std::mem::align_of::<ares_srv_reply>() , 8usize , concat ! (
-                "Alignment of " , stringify ! ( ares_srv_reply ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_srv_reply ) ) . next as * const _ as
-                usize } , 0usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_srv_reply ) , "::"
-                , stringify ! ( next ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_srv_reply ) ) . host as * const _ as
-                usize } , 8usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_srv_reply ) , "::"
-                , stringify ! ( host ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_srv_reply ) ) . priority as * const
-                _ as usize } , 16usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_srv_reply ) , "::"
-                , stringify ! ( priority ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_srv_reply ) ) . weight as * const _
-                as usize } , 18usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_srv_reply ) , "::"
-                , stringify ! ( weight ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_srv_reply ) ) . port as * const _ as
-                usize } , 20usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_srv_reply ) , "::"
-                , stringify ! ( port ) ));
-}
 impl Clone for ares_srv_reply {
     fn clone(&self) -> Self { *self }
 }
@@ -641,28 +428,6 @@
     pub host: *mut ::std::os::raw::c_schar,
     pub priority: ::std::os::raw::c_ushort,
 }
-#[test]
-fn bindgen_test_layout_ares_mx_reply() {
-    assert_eq!(::std::mem::size_of::<ares_mx_reply>() , 24usize , concat ! (
-               "Size of: " , stringify ! ( ares_mx_reply ) ));
-    assert_eq! (::std::mem::align_of::<ares_mx_reply>() , 8usize , concat ! (
-                "Alignment of " , stringify ! ( ares_mx_reply ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_mx_reply ) ) . next as * const _ as
-                usize } , 0usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_mx_reply ) , "::"
-                , stringify ! ( next ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_mx_reply ) ) . host as * const _ as
-                usize } , 8usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_mx_reply ) , "::"
-                , stringify ! ( host ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_mx_reply ) ) . priority as * const _
-                as usize } , 16usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_mx_reply ) , "::"
-                , stringify ! ( priority ) ));
-}
 impl Clone for ares_mx_reply {
     fn clone(&self) -> Self { *self }
 }
@@ -673,28 +438,6 @@
     pub txt: *mut ::std::os::raw::c_uchar,
     pub length: usize,
 }
-#[test]
-fn bindgen_test_layout_ares_txt_reply() {
-    assert_eq!(::std::mem::size_of::<ares_txt_reply>() , 24usize , concat ! (
-               "Size of: " , stringify ! ( ares_txt_reply ) ));
-    assert_eq! (::std::mem::align_of::<ares_txt_reply>() , 8usize , concat ! (
-                "Alignment of " , stringify ! ( ares_txt_reply ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_txt_reply ) ) . next as * const _ as
-                usize } , 0usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_txt_reply ) , "::"
-                , stringify ! ( next ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_txt_reply ) ) . txt as * const _ as
-                usize } , 8usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_txt_reply ) , "::"
-                , stringify ! ( txt ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_txt_reply ) ) . length as * const _
-                as usize } , 16usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_txt_reply ) , "::"
-                , stringify ! ( length ) ));
-}
 impl Clone for ares_txt_reply {
     fn clone(&self) -> Self { *self }
 }
@@ -706,33 +449,6 @@
     pub length: usize,
     pub record_start: ::std::os::raw::c_uchar,
 }
-#[test]
-fn bindgen_test_layout_ares_txt_ext() {
-    assert_eq!(::std::mem::size_of::<ares_txt_ext>() , 32usize , concat ! (
-               "Size of: " , stringify ! ( ares_txt_ext ) ));
-    assert_eq! (::std::mem::align_of::<ares_txt_ext>() , 8usize , concat ! (
-                "Alignment of " , stringify ! ( ares_txt_ext ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_txt_ext ) ) . next as * const _ as
-                usize } , 0usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_txt_ext ) , "::" ,
-                stringify ! ( next ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_txt_ext ) ) . txt as * const _ as
-                usize } , 8usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_txt_ext ) , "::" ,
-                stringify ! ( txt ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_txt_ext ) ) . length as * const _ as
-                usize } , 16usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_txt_ext ) , "::" ,
-                stringify ! ( length ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_txt_ext ) ) . record_start as *
-                const _ as usize } , 24usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_txt_ext ) , "::" ,
-                stringify ! ( record_start ) ));
-}
 impl Clone for ares_txt_ext {
     fn clone(&self) -> Self { *self }
 }
@@ -747,48 +463,6 @@
     pub order: ::std::os::raw::c_ushort,
     pub preference: ::std::os::raw::c_ushort,
 }
-#[test]
-fn bindgen_test_layout_ares_naptr_reply() {
-    assert_eq!(::std::mem::size_of::<ares_naptr_reply>() , 48usize , concat !
-               ( "Size of: " , stringify ! ( ares_naptr_reply ) ));
-    assert_eq! (::std::mem::align_of::<ares_naptr_reply>() , 8usize , concat !
-                ( "Alignment of " , stringify ! ( ares_naptr_reply ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_naptr_reply ) ) . next as * const _
-                as usize } , 0usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_naptr_reply ) ,
-                "::" , stringify ! ( next ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_naptr_reply ) ) . flags as * const _
-                as usize } , 8usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_naptr_reply ) ,
-                "::" , stringify ! ( flags ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_naptr_reply ) ) . service as * const
-                _ as usize } , 16usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_naptr_reply ) ,
-                "::" , stringify ! ( service ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_naptr_reply ) ) . regexp as * const
-                _ as usize } , 24usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_naptr_reply ) ,
-                "::" , stringify ! ( regexp ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_naptr_reply ) ) . replacement as *
-                const _ as usize } , 32usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_naptr_reply ) ,
-                "::" , stringify ! ( replacement ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_naptr_reply ) ) . order as * const _
-                as usize } , 40usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_naptr_reply ) ,
-                "::" , stringify ! ( order ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_naptr_reply ) ) . preference as *
-                const _ as usize } , 42usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_naptr_reply ) ,
-                "::" , stringify ! ( preference ) ));
-}
 impl Clone for ares_naptr_reply {
     fn clone(&self) -> Self { *self }
 }
@@ -803,48 +477,6 @@
     pub expire: ::std::os::raw::c_uint,
     pub minttl: ::std::os::raw::c_uint,
 }
-#[test]
-fn bindgen_test_layout_ares_soa_reply() {
-    assert_eq!(::std::mem::size_of::<ares_soa_reply>() , 40usize , concat ! (
-               "Size of: " , stringify ! ( ares_soa_reply ) ));
-    assert_eq! (::std::mem::align_of::<ares_soa_reply>() , 8usize , concat ! (
-                "Alignment of " , stringify ! ( ares_soa_reply ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_soa_reply ) ) . nsname as * const _
-                as usize } , 0usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_soa_reply ) , "::"
-                , stringify ! ( nsname ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_soa_reply ) ) . hostmaster as *
-                const _ as usize } , 8usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_soa_reply ) , "::"
-                , stringify ! ( hostmaster ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_soa_reply ) ) . serial as * const _
-                as usize } , 16usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_soa_reply ) , "::"
-                , stringify ! ( serial ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_soa_reply ) ) . refresh as * const _
-                as usize } , 20usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_soa_reply ) , "::"
-                , stringify ! ( refresh ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_soa_reply ) ) . retry as * const _
-                as usize } , 24usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_soa_reply ) , "::"
-                , stringify ! ( retry ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_soa_reply ) ) . expire as * const _
-                as usize } , 28usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_soa_reply ) , "::"
-                , stringify ! ( expire ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_soa_reply ) ) . minttl as * const _
-                as usize } , 32usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_soa_reply ) , "::"
-                , stringify ! ( minttl ) ));
-}
 impl Clone for ares_soa_reply {
     fn clone(&self) -> Self { *self }
 }
@@ -942,53 +574,9 @@
     pub addr6: __BindgenUnionField<ares_in6_addr>,
     pub bindgen_union_field: [u32; 4usize],
 }
-#[test]
-fn bindgen_test_layout_ares_addr_node__bindgen_ty_1() {
-    assert_eq!(::std::mem::size_of::<ares_addr_node__bindgen_ty_1>() , 16usize
-               , concat ! (
-               "Size of: " , stringify ! ( ares_addr_node__bindgen_ty_1 ) ));
-    assert_eq! (::std::mem::align_of::<ares_addr_node__bindgen_ty_1>() ,
-                4usize , concat ! (
-                "Alignment of " , stringify ! ( ares_addr_node__bindgen_ty_1 )
-                ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_addr_node__bindgen_ty_1 ) ) . addr4
-                as * const _ as usize } , 0usize , concat ! (
-                "Alignment of field: " , stringify ! (
-                ares_addr_node__bindgen_ty_1 ) , "::" , stringify ! ( addr4 )
-                ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_addr_node__bindgen_ty_1 ) ) . addr6
-                as * const _ as usize } , 0usize , concat ! (
-                "Alignment of field: " , stringify ! (
-                ares_addr_node__bindgen_ty_1 ) , "::" , stringify ! ( addr6 )
-                ));
-}
 impl Clone for ares_addr_node__bindgen_ty_1 {
     fn clone(&self) -> Self { *self }
 }
-#[test]
-fn bindgen_test_layout_ares_addr_node() {
-    assert_eq!(::std::mem::size_of::<ares_addr_node>() , 32usize , concat ! (
-               "Size of: " , stringify ! ( ares_addr_node ) ));
-    assert_eq! (::std::mem::align_of::<ares_addr_node>() , 8usize , concat ! (
-                "Alignment of " , stringify ! ( ares_addr_node ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_addr_node ) ) . next as * const _ as
-                usize } , 0usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_addr_node ) , "::"
-                , stringify ! ( next ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_addr_node ) ) . family as * const _
-                as usize } , 8usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_addr_node ) , "::"
-                , stringify ! ( family ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_addr_node ) ) . addr as * const _ as
-                usize } , 12usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_addr_node ) , "::"
-                , stringify ! ( addr ) ));
-}
 impl Clone for ares_addr_node {
     fn clone(&self) -> Self { *self }
 }
@@ -1008,65 +596,9 @@
     pub addr6: __BindgenUnionField<ares_in6_addr>,
     pub bindgen_union_field: [u32; 4usize],
 }
-#[test]
-fn bindgen_test_layout_ares_addr_port_node__bindgen_ty_1() {
-    assert_eq!(::std::mem::size_of::<ares_addr_port_node__bindgen_ty_1>() ,
-               16usize , concat ! (
-               "Size of: " , stringify ! ( ares_addr_port_node__bindgen_ty_1 )
-               ));
-    assert_eq! (::std::mem::align_of::<ares_addr_port_node__bindgen_ty_1>() ,
-                4usize , concat ! (
-                "Alignment of " , stringify ! (
-                ares_addr_port_node__bindgen_ty_1 ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_addr_port_node__bindgen_ty_1 ) ) .
-                addr4 as * const _ as usize } , 0usize , concat ! (
-                "Alignment of field: " , stringify ! (
-                ares_addr_port_node__bindgen_ty_1 ) , "::" , stringify ! (
-                addr4 ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_addr_port_node__bindgen_ty_1 ) ) .
-                addr6 as * const _ as usize } , 0usize , concat ! (
-                "Alignment of field: " , stringify ! (
-                ares_addr_port_node__bindgen_ty_1 ) , "::" , stringify ! (
-                addr6 ) ));
-}
 impl Clone for ares_addr_port_node__bindgen_ty_1 {
     fn clone(&self) -> Self { *self }
 }
-#[test]
-fn bindgen_test_layout_ares_addr_port_node() {
-    assert_eq!(::std::mem::size_of::<ares_addr_port_node>() , 40usize , concat
-               ! ( "Size of: " , stringify ! ( ares_addr_port_node ) ));
-    assert_eq! (::std::mem::align_of::<ares_addr_port_node>() , 8usize ,
-                concat ! (
-                "Alignment of " , stringify ! ( ares_addr_port_node ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_addr_port_node ) ) . next as * const
-                _ as usize } , 0usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_addr_port_node ) ,
-                "::" , stringify ! ( next ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_addr_port_node ) ) . family as *
-                const _ as usize } , 8usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_addr_port_node ) ,
-                "::" , stringify ! ( family ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_addr_port_node ) ) . addr as * const
-                _ as usize } , 12usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_addr_port_node ) ,
-                "::" , stringify ! ( addr ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_addr_port_node ) ) . udp_port as *
-                const _ as usize } , 28usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_addr_port_node ) ,
-                "::" , stringify ! ( udp_port ) ));
-    assert_eq! (unsafe {
-                & ( * ( 0 as * const ares_addr_port_node ) ) . tcp_port as *
-                const _ as usize } , 32usize , concat ! (
-                "Alignment of field: " , stringify ! ( ares_addr_port_node ) ,
-                "::" , stringify ! ( tcp_port ) ));
-}
 impl Clone for ares_addr_port_node {
     fn clone(&self) -> Self { *self }
 }
